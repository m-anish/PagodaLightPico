name: Validate config samples

on:
  pull_request:
    paths:
      - 'shared/json/config.schema.json'
      - 'firmware/micropython/config/samples/**'
      - '.github/workflows/validate-config.yml'
  push:
    branches:
      - main
      - master
    paths:
      - 'shared/json/config.schema.json'
      - 'firmware/micropython/config/samples/**'
      - '.github/workflows/validate-config.yml'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Ajv (v8)
        run: npm i ajv@8

      - name: Validate sample configs against schema (draft 2020-12)
        run: |
          node -e '
          const fs = require("fs");
          const path = require("path");
          const Ajv2020 = require("ajv/dist/2020").default; // includes 2020-12 meta-schema
          const repoRoot = process.cwd();
          const schemaPath = path.join(repoRoot, "shared/json/config.schema.json");
          const samplesDir = path.join(repoRoot, "firmware/micropython/config/samples");
          const schema = JSON.parse(fs.readFileSync(schemaPath, "utf8"));
          const ajv = new Ajv2020({ strict: false, allErrors: true, allowUnionTypes: true });
          const validate = ajv.compile(schema);
          const files = fs.readdirSync(samplesDir).filter(n => n === "config.json.sample");
          if (files.length === 0) { console.log("No sample files found."); process.exit(0); }
          let failed = false;
          for (const name of files) {
            const p = path.join(samplesDir, name);
            process.stdout.write(`Validating ${path.relative(repoRoot, p)}\n`);
            const data = JSON.parse(fs.readFileSync(p, "utf8"));
            const ok = validate(data);
            if (!ok) {
              failed = true;
              console.error("Schema validation failed for:", path.relative(repoRoot, p));
              console.error(validate.errors);
            }
          }
          if (failed) process.exit(2);
          '
